#! /usr/bin/env node
"use strict";var _chalk=_interopRequireDefault(require("chalk")),_figlet=_interopRequireDefault(require("figlet")),_init=_interopRequireDefault(require("./init")),_create=_interopRequireDefault(require("./create"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var argv=require("yargs").demandCommand(1).command("init","Initialize templer to the project.").command("create <temp> <name> [vars..]","Create templates defined in .temp folders.",function(a){a.positional("temp",{describe:"Template folder name in .temp. Folder name is used to define the type of template to be created. e.g.: components, controllers.\nCaution: There must be a folder with name same as `temp` variable before using this command.",type:"string"}),a.positional("name",{describe:"Name of the template to be created.",type:"string"}),a.positional("vars",{describe:"Variables to be replace in template.",type:"string"}),a.example("$0 create components SomeComponent foo=bar dar=far","Create template while temp file has 2 variables: %%foo%% and %%dar%%")}).default("r","src").alias("r","root").describe("r","Set base folder of templates to be created.").default("e","utf8").alias("e","encoding").describe("e","Set file encoding.").help().argv;switch(console.log(_chalk.default.blue(_figlet.default.textSync("Templer",{}))),argv._[0]){case"init":(0,_init.default)();break;case"create":(0,_create.default)(argv);break;default:process.exit(1);}